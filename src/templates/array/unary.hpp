/*
################################################################################
# Encoding: UTF-8                                                  Tab size: 4 #
#                                                                              #
#                               UNARY OPERATIONS                               #
#                                                                              #
# Ordnung muss sein!                             Copyleft (Æ†) Eugene Zamlinsky #
################################################################################
*/
# pragma	once

namespace Array
{
//****************************************************************************//
//      Square function                                                       //
//****************************************************************************//
template <typename T>
inline T sqr (
	T value
){
	return value * value;
}

//****************************************************************************//
//      Sign function                                                         //
//****************************************************************************//
template <typename T>
inline T sign (
	T value
){
	if (value < 0)
		return -1;
	else if (value > 0)
		return +1;
	else
		return 0;
}

//****************************************************************************//
//      In-place unary arithmetic operation                                   //
//****************************************************************************//
# define	INPLACE(fname, operation)											\
template <typename T>															\
void fname (																	\
	T array[],																	\
	size_t size																	\
){																				\
	for (size_t i = 0; i < size; i++)											\
		array[i] = operation (array[i]);										\
}

//****************************************************************************//
//      Normal unary arithmetic operation                                     //
//****************************************************************************//
# define	NORMAL(fname, operation)											\
template <typename T>															\
void fname (																	\
	T result[],																	\
	const T source[],															\
	size_t size																	\
){																				\
	for (size_t i = 0; i < size; i++)											\
		result[i] = operation (source[i]);										\
}

//****************************************************************************//
//      Negative value                                                        //
//****************************************************************************//
INPLACE(Neg, -)
NORMAL(Neg, -)

//****************************************************************************//
//      Absolute value                                                        //
//****************************************************************************//
INPLACE(Abs, fabs)
NORMAL(Abs, fabs)

//****************************************************************************//
//      Negative absolute value                                               //
//****************************************************************************//
INPLACE(NegAbs, -fabs)
NORMAL(NegAbs, -fabs)

//****************************************************************************//
//      Number sign                                                           //
//****************************************************************************//
INPLACE(Sign, sign)
NORMAL(Sign, sign)

//****************************************************************************//
//      Square                                                                //
//****************************************************************************//
INPLACE(Sqr, sqr)
NORMAL(Sqr, sqr)

//****************************************************************************//
//      Square root                                                           //
//****************************************************************************//
INPLACE(Sqrt, sqrt)
NORMAL(Sqrt, sqrt)

//****************************************************************************//
//      Cube root                                                             //
//****************************************************************************//
INPLACE(Cbrt, cbrt)
NORMAL(Cbrt, cbrt)
}
/*
################################################################################
#                                 END OF FILE                                  #
################################################################################
*/
